/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sync/sync.proto */

#ifndef PROTOBUF_C_sync_2fsync_2eproto__INCLUDED
#define PROTOBUF_C_sync_2fsync_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common/block.pb-c.h"

typedef struct _Sync__SyncMsg Sync__SyncMsg;
typedef struct _Sync__BlockHeightBCM Sync__BlockHeightBCM;
typedef struct _Sync__BlockSyncReq Sync__BlockSyncReq;
typedef struct _Sync__BlockBatch Sync__BlockBatch;
typedef struct _Sync__BlockInfoBatch Sync__BlockInfoBatch;
typedef struct _Sync__SyncBlockBatch Sync__SyncBlockBatch;


/* --- enums --- */

/*
 * specific syncblockmessage types
 */
typedef enum _Sync__SyncMsg__MsgType {
  SYNC__SYNC_MSG__MSG_TYPE__NODE_STATUS_REQ = 0,
  SYNC__SYNC_MSG__MSG_TYPE__NODE_STATUS_RESP = 1,
  SYNC__SYNC_MSG__MSG_TYPE__BLOCK_SYNC_REQ = 2,
  SYNC__SYNC_MSG__MSG_TYPE__BLOCK_SYNC_RESP = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYNC__SYNC_MSG__MSG_TYPE)
} Sync__SyncMsg__MsgType;

/* --- messages --- */

/*
 * network message of synchronization module
 */
struct  _Sync__SyncMsg
{
  ProtobufCMessage base;
  /*
   * sync message type
   */
  Sync__SyncMsg__MsgType type;
  /*
   * payload for the message
   */
  ProtobufCBinaryData payload;
};
#define SYNC__SYNC_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync__sync_msg__descriptor) \
    , SYNC__SYNC_MSG__MSG_TYPE__NODE_STATUS_REQ, {0,NULL} }


/*
 * response message for node status
 */
struct  _Sync__BlockHeightBCM
{
  ProtobufCMessage base;
  int64_t block_height;
  int64_t archived_height;
};
#define SYNC__BLOCK_HEIGHT_BCM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync__block_height_bcm__descriptor) \
    , 0, 0 }


/*
 * block request message
 */
struct  _Sync__BlockSyncReq
{
  ProtobufCMessage base;
  int64_t block_height;
  int64_t batchsize;
  protobuf_c_boolean with_rwset;
};
#define SYNC__BLOCK_SYNC_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync__block_sync_req__descriptor) \
    , 0, 0, 0 }


/*
 * batch blocks
 */
struct  _Sync__BlockBatch
{
  ProtobufCMessage base;
  size_t n_batchs;
  Common__Block **batchs;
};
#define SYNC__BLOCK_BATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync__block_batch__descriptor) \
    , 0,NULL }


/*
 * information of batch blocks
 */
struct  _Sync__BlockInfoBatch
{
  ProtobufCMessage base;
  size_t n_batch;
  Common__BlockInfo **batch;
};
#define SYNC__BLOCK_INFO_BATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync__block_info_batch__descriptor) \
    , 0,NULL }


typedef enum {
  SYNC__SYNC_BLOCK_BATCH__DATA__NOT_SET = 0,
  SYNC__SYNC_BLOCK_BATCH__DATA_BLOCK_BATCH = 1,
  SYNC__SYNC_BLOCK_BATCH__DATA_BLOCKINFO_BATCH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYNC__SYNC_BLOCK_BATCH__DATA)
} Sync__SyncBlockBatch__DataCase;

/*
 * block response message
 */
struct  _Sync__SyncBlockBatch
{
  ProtobufCMessage base;
  Sync__SyncBlockBatch__DataCase data_case;
  union {
    /*
     * the response structure returned when requesting block data
     */
    Sync__BlockBatch *block_batch;
    /*
     * when requesting a block and its read / write set data
     */
    Sync__BlockInfoBatch *blockinfo_batch;
  };
};
#define SYNC__SYNC_BLOCK_BATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync__sync_block_batch__descriptor) \
    , SYNC__SYNC_BLOCK_BATCH__DATA__NOT_SET, {0} }


/* Sync__SyncMsg methods */
void   sync__sync_msg__init
                     (Sync__SyncMsg         *message);
size_t sync__sync_msg__get_packed_size
                     (const Sync__SyncMsg   *message);
size_t sync__sync_msg__pack
                     (const Sync__SyncMsg   *message,
                      uint8_t             *out);
size_t sync__sync_msg__pack_to_buffer
                     (const Sync__SyncMsg   *message,
                      ProtobufCBuffer     *buffer);
Sync__SyncMsg *
       sync__sync_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync__sync_msg__free_unpacked
                     (Sync__SyncMsg *message,
                      ProtobufCAllocator *allocator);
/* Sync__BlockHeightBCM methods */
void   sync__block_height_bcm__init
                     (Sync__BlockHeightBCM         *message);
size_t sync__block_height_bcm__get_packed_size
                     (const Sync__BlockHeightBCM   *message);
size_t sync__block_height_bcm__pack
                     (const Sync__BlockHeightBCM   *message,
                      uint8_t             *out);
size_t sync__block_height_bcm__pack_to_buffer
                     (const Sync__BlockHeightBCM   *message,
                      ProtobufCBuffer     *buffer);
Sync__BlockHeightBCM *
       sync__block_height_bcm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync__block_height_bcm__free_unpacked
                     (Sync__BlockHeightBCM *message,
                      ProtobufCAllocator *allocator);
/* Sync__BlockSyncReq methods */
void   sync__block_sync_req__init
                     (Sync__BlockSyncReq         *message);
size_t sync__block_sync_req__get_packed_size
                     (const Sync__BlockSyncReq   *message);
size_t sync__block_sync_req__pack
                     (const Sync__BlockSyncReq   *message,
                      uint8_t             *out);
size_t sync__block_sync_req__pack_to_buffer
                     (const Sync__BlockSyncReq   *message,
                      ProtobufCBuffer     *buffer);
Sync__BlockSyncReq *
       sync__block_sync_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync__block_sync_req__free_unpacked
                     (Sync__BlockSyncReq *message,
                      ProtobufCAllocator *allocator);
/* Sync__BlockBatch methods */
void   sync__block_batch__init
                     (Sync__BlockBatch         *message);
size_t sync__block_batch__get_packed_size
                     (const Sync__BlockBatch   *message);
size_t sync__block_batch__pack
                     (const Sync__BlockBatch   *message,
                      uint8_t             *out);
size_t sync__block_batch__pack_to_buffer
                     (const Sync__BlockBatch   *message,
                      ProtobufCBuffer     *buffer);
Sync__BlockBatch *
       sync__block_batch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync__block_batch__free_unpacked
                     (Sync__BlockBatch *message,
                      ProtobufCAllocator *allocator);
/* Sync__BlockInfoBatch methods */
void   sync__block_info_batch__init
                     (Sync__BlockInfoBatch         *message);
size_t sync__block_info_batch__get_packed_size
                     (const Sync__BlockInfoBatch   *message);
size_t sync__block_info_batch__pack
                     (const Sync__BlockInfoBatch   *message,
                      uint8_t             *out);
size_t sync__block_info_batch__pack_to_buffer
                     (const Sync__BlockInfoBatch   *message,
                      ProtobufCBuffer     *buffer);
Sync__BlockInfoBatch *
       sync__block_info_batch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync__block_info_batch__free_unpacked
                     (Sync__BlockInfoBatch *message,
                      ProtobufCAllocator *allocator);
/* Sync__SyncBlockBatch methods */
void   sync__sync_block_batch__init
                     (Sync__SyncBlockBatch         *message);
size_t sync__sync_block_batch__get_packed_size
                     (const Sync__SyncBlockBatch   *message);
size_t sync__sync_block_batch__pack
                     (const Sync__SyncBlockBatch   *message,
                      uint8_t             *out);
size_t sync__sync_block_batch__pack_to_buffer
                     (const Sync__SyncBlockBatch   *message,
                      ProtobufCBuffer     *buffer);
Sync__SyncBlockBatch *
       sync__sync_block_batch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync__sync_block_batch__free_unpacked
                     (Sync__SyncBlockBatch *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Sync__SyncMsg_Closure)
                 (const Sync__SyncMsg *message,
                  void *closure_data);
typedef void (*Sync__BlockHeightBCM_Closure)
                 (const Sync__BlockHeightBCM *message,
                  void *closure_data);
typedef void (*Sync__BlockSyncReq_Closure)
                 (const Sync__BlockSyncReq *message,
                  void *closure_data);
typedef void (*Sync__BlockBatch_Closure)
                 (const Sync__BlockBatch *message,
                  void *closure_data);
typedef void (*Sync__BlockInfoBatch_Closure)
                 (const Sync__BlockInfoBatch *message,
                  void *closure_data);
typedef void (*Sync__SyncBlockBatch_Closure)
                 (const Sync__SyncBlockBatch *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor sync__sync_msg__descriptor;
extern const ProtobufCEnumDescriptor    sync__sync_msg__msg_type__descriptor;
extern const ProtobufCMessageDescriptor sync__block_height_bcm__descriptor;
extern const ProtobufCMessageDescriptor sync__block_sync_req__descriptor;
extern const ProtobufCMessageDescriptor sync__block_batch__descriptor;
extern const ProtobufCMessageDescriptor sync__block_info_batch__descriptor;
extern const ProtobufCMessageDescriptor sync__sync_block_batch__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sync_2fsync_2eproto__INCLUDED */
