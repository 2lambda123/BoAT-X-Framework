/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: config/chainmaker_server.proto */

#ifndef PROTOBUF_C_config_2fchainmaker_5fserver_2eproto__INCLUDED
#define PROTOBUF_C_config_2fchainmaker_5fserver_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Config__ChainMakerVersionRequest Config__ChainMakerVersionRequest;
typedef struct _Config__ChainMakerVersionResponse Config__ChainMakerVersionResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Request for chainmaker version
 */
struct  _Config__ChainMakerVersionRequest
{
  ProtobufCMessage base;
};
#define CONFIG__CHAIN_MAKER_VERSION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__chain_maker_version_request__descriptor) \
     }


/*
 * Response for chainmaker version
 */
struct  _Config__ChainMakerVersionResponse
{
  ProtobufCMessage base;
  /*
   * 0 success
   * 1 fail
   */
  int32_t code;
  char *message;
  char *version;
};
#define CONFIG__CHAIN_MAKER_VERSION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__chain_maker_version_response__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Config__ChainMakerVersionRequest methods */
void   config__chain_maker_version_request__init
                     (Config__ChainMakerVersionRequest         *message);
size_t config__chain_maker_version_request__get_packed_size
                     (const Config__ChainMakerVersionRequest   *message);
size_t config__chain_maker_version_request__pack
                     (const Config__ChainMakerVersionRequest   *message,
                      uint8_t             *out);
size_t config__chain_maker_version_request__pack_to_buffer
                     (const Config__ChainMakerVersionRequest   *message,
                      ProtobufCBuffer     *buffer);
Config__ChainMakerVersionRequest *
       config__chain_maker_version_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__chain_maker_version_request__free_unpacked
                     (Config__ChainMakerVersionRequest *message,
                      ProtobufCAllocator *allocator);
/* Config__ChainMakerVersionResponse methods */
void   config__chain_maker_version_response__init
                     (Config__ChainMakerVersionResponse         *message);
size_t config__chain_maker_version_response__get_packed_size
                     (const Config__ChainMakerVersionResponse   *message);
size_t config__chain_maker_version_response__pack
                     (const Config__ChainMakerVersionResponse   *message,
                      uint8_t             *out);
size_t config__chain_maker_version_response__pack_to_buffer
                     (const Config__ChainMakerVersionResponse   *message,
                      ProtobufCBuffer     *buffer);
Config__ChainMakerVersionResponse *
       config__chain_maker_version_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__chain_maker_version_response__free_unpacked
                     (Config__ChainMakerVersionResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Config__ChainMakerVersionRequest_Closure)
                 (const Config__ChainMakerVersionRequest *message,
                  void *closure_data);
typedef void (*Config__ChainMakerVersionResponse_Closure)
                 (const Config__ChainMakerVersionResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor config__chain_maker_version_request__descriptor;
extern const ProtobufCMessageDescriptor config__chain_maker_version_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_config_2fchainmaker_5fserver_2eproto__INCLUDED */
