/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: config/chain_config.proto */

#ifndef PROTOBUF_C_config_2fchain_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_config_2fchain_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "consensus/consensus.pb-c.h"
#include "common/request.pb-c.h"
#include "accesscontrol/policy.pb-c.h"

typedef struct _Config__ChainConfig Config__ChainConfig;
typedef struct _Config__ResourcePolicy Config__ResourcePolicy;
typedef struct _Config__CryptoConfig Config__CryptoConfig;
typedef struct _Config__BlockConfig Config__BlockConfig;
typedef struct _Config__SchedulerConfig Config__SchedulerConfig;
typedef struct _Config__SnapshotConfig Config__SnapshotConfig;
typedef struct _Config__ContextConfig Config__ContextConfig;
typedef struct _Config__CoreConfig Config__CoreConfig;
typedef struct _Config__ConsensusConfig Config__ConsensusConfig;
typedef struct _Config__OrgConfig Config__OrgConfig;
typedef struct _Config__TrustRootConfig Config__TrustRootConfig;
typedef struct _Config__ContractConfig Config__ContractConfig;


/* --- enums --- */


/* --- messages --- */

/*
 * ChainConfig
 */
struct  _Config__ChainConfig
{
  ProtobufCMessage base;
  /*
   * blockchain identifier
   */
  char *chain_id;
  /*
   * blockchain version
   */
  char *version;
  /*
   * authentication type
   */
  char *auth_type;
  /*
   * config sequence
   */
  uint64_t sequence;
  /*
   * encryption algorithm related configuration
   */
  Config__CryptoConfig *crypto;
  /*
   * block related configuration
   */
  Config__BlockConfig *block;
  /*
   * core module related configuration
   */
  Config__CoreConfig *core;
  /*
   * consensus related configuration
   */
  Config__ConsensusConfig *consensus;
  /*
   * trusted root related configuration
   * for alliance members, the initial member's root info of the consortium; for public chain, there is no need to configure
   * Key: node_id; value: address, node public key / CA certificate
   */
  size_t n_trust_roots;
  Config__TrustRootConfig **trust_roots;
  /*
   * permission related configuration
   */
  size_t n_resource_policies;
  Config__ResourcePolicy **resource_policies;
  Config__ContractConfig *contract;
  /*
   * snapshot module related configuration
   */
  Config__SnapshotConfig *snapshot;
  /*
   * scheduler module related configuration
   */
  Config__SchedulerConfig *scheduler;
  /*
   * tx sim context module related configuration
   */
  Config__ContextConfig *context;
};
#define CONFIG__CHAIN_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__chain_config__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, NULL, NULL, NULL, NULL, 0,NULL, 0,NULL, NULL, NULL, NULL, NULL }


/*
 * specific permission configuration structure
 */
struct  _Config__ResourcePolicy
{
  ProtobufCMessage base;
  /*
   * resource name
   */
  char *resource_name;
  /*
   * policy(permission)
   */
  Accesscontrol__Policy *policy;
};
#define CONFIG__RESOURCE_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__resource_policy__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


/*
 * encryption configuration
 */
struct  _Config__CryptoConfig
{
  ProtobufCMessage base;
  /*
   * enable Transaction timestamp verification or Not
   */
  char *hash;
};
#define CONFIG__CRYPTO_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__crypto_config__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * elockConfig
 */
struct  _Config__BlockConfig
{
  ProtobufCMessage base;
  /*
   * enable transaction timestamp verification or Not
   */
  protobuf_c_boolean tx_timestamp_verify;
  /*
   * expiration time of transaction timestamp (seconds)
   */
  uint32_t tx_timeout;
  /*
   * maximum number of transactions in a block
   */
  uint32_t block_tx_capacity;
  /*
   * maximum block size, in MB
   */
  uint32_t block_size;
  /*
   * block proposing interval, in ms
   */
  uint32_t block_interval;
};
#define CONFIG__BLOCK_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__block_config__descriptor) \
    , 0, 0, 0, 0, 0 }


/*
 * Scheduler configuration
 */
struct  _Config__SchedulerConfig
{
  ProtobufCMessage base;
  /*
   * for evidence constract
   */
  protobuf_c_boolean enable_evidence;
};
#define CONFIG__SCHEDULER_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__scheduler_config__descriptor) \
    , 0 }


/*
 * Snapshot configuration
 */
struct  _Config__SnapshotConfig
{
  ProtobufCMessage base;
  /*
   * for the evidence contract
   */
  protobuf_c_boolean enable_evidence;
};
#define CONFIG__SNAPSHOT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__snapshot_config__descriptor) \
    , 0 }


/*
 * TxSimContext configuration
 */
struct  _Config__ContextConfig
{
  ProtobufCMessage base;
  /*
   * for the evidence contract
   */
  protobuf_c_boolean enable_evidence;
};
#define CONFIG__CONTEXT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__context_config__descriptor) \
    , 0 }


/*
 * core module related configuration
 */
struct  _Config__CoreConfig
{
  ProtobufCMessage base;
  /*
   * [0, 60], the time when the transaction scheduler gets the transaction from the transaction pool to schedule
   */
  uint64_t tx_scheduler_timeout;
  /*
   * [0, 60], the time-out for verification after the transaction scheduler obtains the transaction from the block
   */
  uint64_t tx_scheduler_validate_timeout;
};
#define CONFIG__CORE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__core_config__descriptor) \
    , 0, 0 }


/*
 * consensus module related configuration
 */
struct  _Config__ConsensusConfig
{
  ProtobufCMessage base;
  /*
   * consensus type
   */
  Consensus__ConsensusType type;
  /*
   * organization list of nodes
   */
  size_t n_nodes;
  Config__OrgConfig **nodes;
  /*
   * expand the field, record the difficulty, reward and other consensus algorithm configuration
   */
  size_t n_ext_config;
  Common__KeyValuePair **ext_config;
  /*
   * Initialize the configuration of DPOS
   */
  size_t n_dpos_config;
  Common__KeyValuePair **dpos_config;
};
#define CONFIG__CONSENSUS_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__consensus_config__descriptor) \
    , CONSENSUS__CONSENSUS_TYPE__SOLO, 0,NULL, 0,NULL, 0,NULL }


/*
 * organization related configuration
 */
struct  _Config__OrgConfig
{
  ProtobufCMessage base;
  /*
   * organization identifier
   */
  char *org_id;
  /*
   * address list owned by the organization
   * Deprecated , replace by node_id
   */
  size_t n_address;
  char **address;
  /*
   * node id list owned by the organization
   */
  size_t n_node_id;
  char **node_id;
};
#define CONFIG__ORG_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__org_config__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


/*
 * trusted root related configuration
 */
struct  _Config__TrustRootConfig
{
  ProtobufCMessage base;
  /*
   * oranization ideftifier
   */
  char *org_id;
  /*
   * root certificate / public key
   */
  char *root;
};
#define CONFIG__TRUST_ROOT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__trust_root_config__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Config__ContractConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean enable_sql_support;
};
#define CONFIG__CONTRACT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__contract_config__descriptor) \
    , 0 }


/* Config__ChainConfig methods */
void   config__chain_config__init
                     (Config__ChainConfig         *message);
size_t config__chain_config__get_packed_size
                     (const Config__ChainConfig   *message);
size_t config__chain_config__pack
                     (const Config__ChainConfig   *message,
                      uint8_t             *out);
size_t config__chain_config__pack_to_buffer
                     (const Config__ChainConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__ChainConfig *
       config__chain_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__chain_config__free_unpacked
                     (Config__ChainConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__ResourcePolicy methods */
void   config__resource_policy__init
                     (Config__ResourcePolicy         *message);
size_t config__resource_policy__get_packed_size
                     (const Config__ResourcePolicy   *message);
size_t config__resource_policy__pack
                     (const Config__ResourcePolicy   *message,
                      uint8_t             *out);
size_t config__resource_policy__pack_to_buffer
                     (const Config__ResourcePolicy   *message,
                      ProtobufCBuffer     *buffer);
Config__ResourcePolicy *
       config__resource_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__resource_policy__free_unpacked
                     (Config__ResourcePolicy *message,
                      ProtobufCAllocator *allocator);
/* Config__CryptoConfig methods */
void   config__crypto_config__init
                     (Config__CryptoConfig         *message);
size_t config__crypto_config__get_packed_size
                     (const Config__CryptoConfig   *message);
size_t config__crypto_config__pack
                     (const Config__CryptoConfig   *message,
                      uint8_t             *out);
size_t config__crypto_config__pack_to_buffer
                     (const Config__CryptoConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__CryptoConfig *
       config__crypto_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__crypto_config__free_unpacked
                     (Config__CryptoConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__BlockConfig methods */
void   config__block_config__init
                     (Config__BlockConfig         *message);
size_t config__block_config__get_packed_size
                     (const Config__BlockConfig   *message);
size_t config__block_config__pack
                     (const Config__BlockConfig   *message,
                      uint8_t             *out);
size_t config__block_config__pack_to_buffer
                     (const Config__BlockConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__BlockConfig *
       config__block_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__block_config__free_unpacked
                     (Config__BlockConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__SchedulerConfig methods */
void   config__scheduler_config__init
                     (Config__SchedulerConfig         *message);
size_t config__scheduler_config__get_packed_size
                     (const Config__SchedulerConfig   *message);
size_t config__scheduler_config__pack
                     (const Config__SchedulerConfig   *message,
                      uint8_t             *out);
size_t config__scheduler_config__pack_to_buffer
                     (const Config__SchedulerConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__SchedulerConfig *
       config__scheduler_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__scheduler_config__free_unpacked
                     (Config__SchedulerConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__SnapshotConfig methods */
void   config__snapshot_config__init
                     (Config__SnapshotConfig         *message);
size_t config__snapshot_config__get_packed_size
                     (const Config__SnapshotConfig   *message);
size_t config__snapshot_config__pack
                     (const Config__SnapshotConfig   *message,
                      uint8_t             *out);
size_t config__snapshot_config__pack_to_buffer
                     (const Config__SnapshotConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__SnapshotConfig *
       config__snapshot_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__snapshot_config__free_unpacked
                     (Config__SnapshotConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__ContextConfig methods */
void   config__context_config__init
                     (Config__ContextConfig         *message);
size_t config__context_config__get_packed_size
                     (const Config__ContextConfig   *message);
size_t config__context_config__pack
                     (const Config__ContextConfig   *message,
                      uint8_t             *out);
size_t config__context_config__pack_to_buffer
                     (const Config__ContextConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__ContextConfig *
       config__context_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__context_config__free_unpacked
                     (Config__ContextConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__CoreConfig methods */
void   config__core_config__init
                     (Config__CoreConfig         *message);
size_t config__core_config__get_packed_size
                     (const Config__CoreConfig   *message);
size_t config__core_config__pack
                     (const Config__CoreConfig   *message,
                      uint8_t             *out);
size_t config__core_config__pack_to_buffer
                     (const Config__CoreConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__CoreConfig *
       config__core_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__core_config__free_unpacked
                     (Config__CoreConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__ConsensusConfig methods */
void   config__consensus_config__init
                     (Config__ConsensusConfig         *message);
size_t config__consensus_config__get_packed_size
                     (const Config__ConsensusConfig   *message);
size_t config__consensus_config__pack
                     (const Config__ConsensusConfig   *message,
                      uint8_t             *out);
size_t config__consensus_config__pack_to_buffer
                     (const Config__ConsensusConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__ConsensusConfig *
       config__consensus_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__consensus_config__free_unpacked
                     (Config__ConsensusConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__OrgConfig methods */
void   config__org_config__init
                     (Config__OrgConfig         *message);
size_t config__org_config__get_packed_size
                     (const Config__OrgConfig   *message);
size_t config__org_config__pack
                     (const Config__OrgConfig   *message,
                      uint8_t             *out);
size_t config__org_config__pack_to_buffer
                     (const Config__OrgConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__OrgConfig *
       config__org_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__org_config__free_unpacked
                     (Config__OrgConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__TrustRootConfig methods */
void   config__trust_root_config__init
                     (Config__TrustRootConfig         *message);
size_t config__trust_root_config__get_packed_size
                     (const Config__TrustRootConfig   *message);
size_t config__trust_root_config__pack
                     (const Config__TrustRootConfig   *message,
                      uint8_t             *out);
size_t config__trust_root_config__pack_to_buffer
                     (const Config__TrustRootConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__TrustRootConfig *
       config__trust_root_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__trust_root_config__free_unpacked
                     (Config__TrustRootConfig *message,
                      ProtobufCAllocator *allocator);
/* Config__ContractConfig methods */
void   config__contract_config__init
                     (Config__ContractConfig         *message);
size_t config__contract_config__get_packed_size
                     (const Config__ContractConfig   *message);
size_t config__contract_config__pack
                     (const Config__ContractConfig   *message,
                      uint8_t             *out);
size_t config__contract_config__pack_to_buffer
                     (const Config__ContractConfig   *message,
                      ProtobufCBuffer     *buffer);
Config__ContractConfig *
       config__contract_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__contract_config__free_unpacked
                     (Config__ContractConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Config__ChainConfig_Closure)
                 (const Config__ChainConfig *message,
                  void *closure_data);
typedef void (*Config__ResourcePolicy_Closure)
                 (const Config__ResourcePolicy *message,
                  void *closure_data);
typedef void (*Config__CryptoConfig_Closure)
                 (const Config__CryptoConfig *message,
                  void *closure_data);
typedef void (*Config__BlockConfig_Closure)
                 (const Config__BlockConfig *message,
                  void *closure_data);
typedef void (*Config__SchedulerConfig_Closure)
                 (const Config__SchedulerConfig *message,
                  void *closure_data);
typedef void (*Config__SnapshotConfig_Closure)
                 (const Config__SnapshotConfig *message,
                  void *closure_data);
typedef void (*Config__ContextConfig_Closure)
                 (const Config__ContextConfig *message,
                  void *closure_data);
typedef void (*Config__CoreConfig_Closure)
                 (const Config__CoreConfig *message,
                  void *closure_data);
typedef void (*Config__ConsensusConfig_Closure)
                 (const Config__ConsensusConfig *message,
                  void *closure_data);
typedef void (*Config__OrgConfig_Closure)
                 (const Config__OrgConfig *message,
                  void *closure_data);
typedef void (*Config__TrustRootConfig_Closure)
                 (const Config__TrustRootConfig *message,
                  void *closure_data);
typedef void (*Config__ContractConfig_Closure)
                 (const Config__ContractConfig *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor config__chain_config__descriptor;
extern const ProtobufCMessageDescriptor config__resource_policy__descriptor;
extern const ProtobufCMessageDescriptor config__crypto_config__descriptor;
extern const ProtobufCMessageDescriptor config__block_config__descriptor;
extern const ProtobufCMessageDescriptor config__scheduler_config__descriptor;
extern const ProtobufCMessageDescriptor config__snapshot_config__descriptor;
extern const ProtobufCMessageDescriptor config__context_config__descriptor;
extern const ProtobufCMessageDescriptor config__core_config__descriptor;
extern const ProtobufCMessageDescriptor config__consensus_config__descriptor;
extern const ProtobufCMessageDescriptor config__org_config__descriptor;
extern const ProtobufCMessageDescriptor config__trust_root_config__descriptor;
extern const ProtobufCMessageDescriptor config__contract_config__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_config_2fchain_5fconfig_2eproto__INCLUDED */
