/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: consensus/consensus.proto */

#ifndef PROTOBUF_C_consensus_2fconsensus_2eproto__INCLUDED
#define PROTOBUF_C_consensus_2fconsensus_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common/block.pb-c.h"
#include "common/rwset.pb-c.h"

typedef struct _Consensus__VerifyResult Consensus__VerifyResult;
typedef struct _Consensus__VerifyResult__TxsRwSetEntry Consensus__VerifyResult__TxsRwSetEntry;
typedef struct _Consensus__ProposalBlock Consensus__ProposalBlock;
typedef struct _Consensus__ProposalBlock__TxsRwSetEntry Consensus__ProposalBlock__TxsRwSetEntry;
typedef struct _Consensus__BlockHeaderConsensusArgs Consensus__BlockHeaderConsensusArgs;
typedef struct _Consensus__GovernanceMember Consensus__GovernanceMember;
typedef struct _Consensus__GovernanceContract Consensus__GovernanceContract;


/* --- enums --- */

typedef enum _Consensus__VerifyResult__Code {
  CONSENSUS__VERIFY_RESULT__CODE__SUCCESS = 0,
  CONSENSUS__VERIFY_RESULT__CODE__FAIL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONSENSUS__VERIFY_RESULT__CODE)
} Consensus__VerifyResult__Code;
typedef enum _Consensus__ConsensusType {
  CONSENSUS__CONSENSUS_TYPE__SOLO = 0,
  CONSENSUS__CONSENSUS_TYPE__TBFT = 1,
  CONSENSUS__CONSENSUS_TYPE__MBFT = 2,
  CONSENSUS__CONSENSUS_TYPE__HOTSTUFF = 3,
  CONSENSUS__CONSENSUS_TYPE__RAFT = 4,
  CONSENSUS__CONSENSUS_TYPE__DPOS = 5,
  CONSENSUS__CONSENSUS_TYPE__POW = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONSENSUS__CONSENSUS_TYPE)
} Consensus__ConsensusType;

/* --- messages --- */

struct  _Consensus__VerifyResult__TxsRwSetEntry
{
  ProtobufCMessage base;
  char *key;
  Common__TxRWSet *value;
};
#define CONSENSUS__VERIFY_RESULT__TXS_RW_SET_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&consensus__verify_result__txs_rw_set_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Consensus__VerifyResult
{
  ProtobufCMessage base;
  Common__Block *verified_block;
  Consensus__VerifyResult__Code code;
  char *msg;
  size_t n_txs_rw_set;
  Consensus__VerifyResult__TxsRwSetEntry **txs_rw_set;
};
#define CONSENSUS__VERIFY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&consensus__verify_result__descriptor) \
    , NULL, CONSENSUS__VERIFY_RESULT__CODE__SUCCESS, (char *)protobuf_c_empty_string, 0,NULL }


struct  _Consensus__ProposalBlock__TxsRwSetEntry
{
  ProtobufCMessage base;
  char *key;
  Common__TxRWSet *value;
};
#define CONSENSUS__PROPOSAL_BLOCK__TXS_RW_SET_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&consensus__proposal_block__txs_rw_set_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Consensus__ProposalBlock
{
  ProtobufCMessage base;
  Common__Block *block;
  size_t n_txs_rw_set;
  Consensus__ProposalBlock__TxsRwSetEntry **txs_rw_set;
};
#define CONSENSUS__PROPOSAL_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&consensus__proposal_block__descriptor) \
    , NULL, 0,NULL }


struct  _Consensus__BlockHeaderConsensusArgs
{
  ProtobufCMessage base;
  int64_t consensustype;
  /*
   * bytes ConsensusData = 2;
   */
  uint64_t round;
  uint64_t level;
  Common__TxRWSet *consensusdata;
};
#define CONSENSUS__BLOCK_HEADER_CONSENSUS_ARGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&consensus__block_header_consensus_args__descriptor) \
    , 0, 0, 0, NULL }


struct  _Consensus__GovernanceMember
{
  ProtobufCMessage base;
  char *nodeid;
  int64_t index;
};
#define CONSENSUS__GOVERNANCE_MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&consensus__governance_member__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _Consensus__GovernanceContract
{
  ProtobufCMessage base;
  /*
   *epoch idï¼Œincrease by epoch switch
   */
  uint64_t epochid;
  /*
   *consensus type
   */
  Consensus__ConsensusType type;
  /*
   *current index to be assigned
   */
  int64_t curmaxindex;
  protobuf_c_boolean skiptimeoutcommit;
  /*
   *bool IsConfigChg = 4;   //is the configuration changed
   *bool IsValidatorChg = 5;    //is the validator changed
   */
  /*
   *config sequence, check whether the configuration is changed
   */
  uint64_t configsequence;
  /*
   *number of nodes participating in the consensus
   */
  uint64_t n;
  /*
   *the minimum number of consensus nodes that need to survive
   */
  uint64_t minquorumforqc;
  uint64_t cachedlen;
  /*
   *the next height of switching validator
   */
  uint64_t nextswitchheight;
  /*
   *the buffer height of switching validator
   */
  uint64_t transitblock;
  /*
   *cycle of switching validator
   */
  uint64_t blocknumperepoch;
  /*
   *maximum number of participating validators
   */
  uint64_t validatornum;
  /*
   *the rounds in which each validator can produce blocks continuously
   */
  uint64_t nodeproposeround;
  /*
   *currently maintained nodes
   */
  size_t n_members;
  Consensus__GovernanceMember **members;
  /*
   *currently participate validators
   */
  size_t n_validators;
  Consensus__GovernanceMember **validators;
  /*
   *next participate validators
   */
  size_t n_nextvalidators;
  Consensus__GovernanceMember **nextvalidators;
  /*
   *the last epoch minimum number of consensus nodes that need to survive
   */
  uint64_t lastminquorumforqc;
  /*
   *The base timeout for viewChange
   */
  uint64_t hotstuffroundtimeoutmill;
  /*
   *The delta timeout for the viewChange
   */
  uint64_t hotstuffroundtimeoutintervalmill;
};
#define CONSENSUS__GOVERNANCE_CONTRACT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&consensus__governance_contract__descriptor) \
    , 0, CONSENSUS__CONSENSUS_TYPE__SOLO, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0 }


/* Consensus__VerifyResult__TxsRwSetEntry methods */
void   consensus__verify_result__txs_rw_set_entry__init
                     (Consensus__VerifyResult__TxsRwSetEntry         *message);
/* Consensus__VerifyResult methods */
void   consensus__verify_result__init
                     (Consensus__VerifyResult         *message);
size_t consensus__verify_result__get_packed_size
                     (const Consensus__VerifyResult   *message);
size_t consensus__verify_result__pack
                     (const Consensus__VerifyResult   *message,
                      uint8_t             *out);
size_t consensus__verify_result__pack_to_buffer
                     (const Consensus__VerifyResult   *message,
                      ProtobufCBuffer     *buffer);
Consensus__VerifyResult *
       consensus__verify_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   consensus__verify_result__free_unpacked
                     (Consensus__VerifyResult *message,
                      ProtobufCAllocator *allocator);
/* Consensus__ProposalBlock__TxsRwSetEntry methods */
void   consensus__proposal_block__txs_rw_set_entry__init
                     (Consensus__ProposalBlock__TxsRwSetEntry         *message);
/* Consensus__ProposalBlock methods */
void   consensus__proposal_block__init
                     (Consensus__ProposalBlock         *message);
size_t consensus__proposal_block__get_packed_size
                     (const Consensus__ProposalBlock   *message);
size_t consensus__proposal_block__pack
                     (const Consensus__ProposalBlock   *message,
                      uint8_t             *out);
size_t consensus__proposal_block__pack_to_buffer
                     (const Consensus__ProposalBlock   *message,
                      ProtobufCBuffer     *buffer);
Consensus__ProposalBlock *
       consensus__proposal_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   consensus__proposal_block__free_unpacked
                     (Consensus__ProposalBlock *message,
                      ProtobufCAllocator *allocator);
/* Consensus__BlockHeaderConsensusArgs methods */
void   consensus__block_header_consensus_args__init
                     (Consensus__BlockHeaderConsensusArgs         *message);
size_t consensus__block_header_consensus_args__get_packed_size
                     (const Consensus__BlockHeaderConsensusArgs   *message);
size_t consensus__block_header_consensus_args__pack
                     (const Consensus__BlockHeaderConsensusArgs   *message,
                      uint8_t             *out);
size_t consensus__block_header_consensus_args__pack_to_buffer
                     (const Consensus__BlockHeaderConsensusArgs   *message,
                      ProtobufCBuffer     *buffer);
Consensus__BlockHeaderConsensusArgs *
       consensus__block_header_consensus_args__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   consensus__block_header_consensus_args__free_unpacked
                     (Consensus__BlockHeaderConsensusArgs *message,
                      ProtobufCAllocator *allocator);
/* Consensus__GovernanceMember methods */
void   consensus__governance_member__init
                     (Consensus__GovernanceMember         *message);
size_t consensus__governance_member__get_packed_size
                     (const Consensus__GovernanceMember   *message);
size_t consensus__governance_member__pack
                     (const Consensus__GovernanceMember   *message,
                      uint8_t             *out);
size_t consensus__governance_member__pack_to_buffer
                     (const Consensus__GovernanceMember   *message,
                      ProtobufCBuffer     *buffer);
Consensus__GovernanceMember *
       consensus__governance_member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   consensus__governance_member__free_unpacked
                     (Consensus__GovernanceMember *message,
                      ProtobufCAllocator *allocator);
/* Consensus__GovernanceContract methods */
void   consensus__governance_contract__init
                     (Consensus__GovernanceContract         *message);
size_t consensus__governance_contract__get_packed_size
                     (const Consensus__GovernanceContract   *message);
size_t consensus__governance_contract__pack
                     (const Consensus__GovernanceContract   *message,
                      uint8_t             *out);
size_t consensus__governance_contract__pack_to_buffer
                     (const Consensus__GovernanceContract   *message,
                      ProtobufCBuffer     *buffer);
Consensus__GovernanceContract *
       consensus__governance_contract__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   consensus__governance_contract__free_unpacked
                     (Consensus__GovernanceContract *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Consensus__VerifyResult__TxsRwSetEntry_Closure)
                 (const Consensus__VerifyResult__TxsRwSetEntry *message,
                  void *closure_data);
typedef void (*Consensus__VerifyResult_Closure)
                 (const Consensus__VerifyResult *message,
                  void *closure_data);
typedef void (*Consensus__ProposalBlock__TxsRwSetEntry_Closure)
                 (const Consensus__ProposalBlock__TxsRwSetEntry *message,
                  void *closure_data);
typedef void (*Consensus__ProposalBlock_Closure)
                 (const Consensus__ProposalBlock *message,
                  void *closure_data);
typedef void (*Consensus__BlockHeaderConsensusArgs_Closure)
                 (const Consensus__BlockHeaderConsensusArgs *message,
                  void *closure_data);
typedef void (*Consensus__GovernanceMember_Closure)
                 (const Consensus__GovernanceMember *message,
                  void *closure_data);
typedef void (*Consensus__GovernanceContract_Closure)
                 (const Consensus__GovernanceContract *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    consensus__consensus_type__descriptor;
extern const ProtobufCMessageDescriptor consensus__verify_result__descriptor;
extern const ProtobufCMessageDescriptor consensus__verify_result__txs_rw_set_entry__descriptor;
extern const ProtobufCEnumDescriptor    consensus__verify_result__code__descriptor;
extern const ProtobufCMessageDescriptor consensus__proposal_block__descriptor;
extern const ProtobufCMessageDescriptor consensus__proposal_block__txs_rw_set_entry__descriptor;
extern const ProtobufCMessageDescriptor consensus__block_header_consensus_args__descriptor;
extern const ProtobufCMessageDescriptor consensus__governance_member__descriptor;
extern const ProtobufCMessageDescriptor consensus__governance_contract__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_consensus_2fconsensus_2eproto__INCLUDED */
