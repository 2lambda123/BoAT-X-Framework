/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: txpool/transaction_pool.proto */

#ifndef PROTOBUF_C_txpool_2ftransaction_5fpool_2eproto__INCLUDED
#define PROTOBUF_C_txpool_2ftransaction_5fpool_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common/transaction.pb-c.h"

typedef struct _Txpool__TxPoolSignal Txpool__TxPoolSignal;
typedef struct _Txpool__TxBatch Txpool__TxBatch;
typedef struct _Txpool__TxBatch__TxIdsMapEntry Txpool__TxBatch__TxIdsMapEntry;


/* --- enums --- */

/*
 * SignalType is a transaction event type
 */
typedef enum _Txpool__SignalType {
  /*
   * no transaction
   */
  TXPOOL__SIGNAL_TYPE__NO_EVENT = 0,
  /*
   * new transaction
   */
  TXPOOL__SIGNAL_TYPE__TRANSACTION_INCOME = 1,
  /*
   * packing block
   */
  TXPOOL__SIGNAL_TYPE__BLOCK_PROPOSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TXPOOL__SIGNAL_TYPE)
} Txpool__SignalType;

/* --- messages --- */

/*
 * TxPoolSignal is used by tx pool to send signal to block proposer
 */
struct  _Txpool__TxPoolSignal
{
  ProtobufCMessage base;
  /*
   * transaction event type
   */
  Txpool__SignalType signaltype;
  /*
   * chainId
   */
  char *chainid;
};
#define TXPOOL__TX_POOL_SIGNAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&txpool__tx_pool_signal__descriptor) \
    , TXPOOL__SIGNAL_TYPE__NO_EVENT, (char *)protobuf_c_empty_string }


struct  _Txpool__TxBatch__TxIdsMapEntry
{
  ProtobufCMessage base;
  char *key;
  int32_t value;
};
#define TXPOOL__TX_BATCH__TX_IDS_MAP_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&txpool__tx_batch__tx_ids_map_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/*
 * transaction batch
 */
struct  _Txpool__TxBatch
{
  ProtobufCMessage base;
  /*
   * batch ID
   */
  int32_t batchid;
  /*
   * node ID
   */
  char *nodeid;
  /*
   * batch size
   */
  int32_t size;
  /*
   * transaction list
   */
  size_t n_txs;
  Common__Transaction **txs;
  /*
   * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
   */
  size_t n_txidsmap;
  Txpool__TxBatch__TxIdsMapEntry **txidsmap;
};
#define TXPOOL__TX_BATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&txpool__tx_batch__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0,NULL, 0,NULL }


/* Txpool__TxPoolSignal methods */
void   txpool__tx_pool_signal__init
                     (Txpool__TxPoolSignal         *message);
size_t txpool__tx_pool_signal__get_packed_size
                     (const Txpool__TxPoolSignal   *message);
size_t txpool__tx_pool_signal__pack
                     (const Txpool__TxPoolSignal   *message,
                      uint8_t             *out);
size_t txpool__tx_pool_signal__pack_to_buffer
                     (const Txpool__TxPoolSignal   *message,
                      ProtobufCBuffer     *buffer);
Txpool__TxPoolSignal *
       txpool__tx_pool_signal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   txpool__tx_pool_signal__free_unpacked
                     (Txpool__TxPoolSignal *message,
                      ProtobufCAllocator *allocator);
/* Txpool__TxBatch__TxIdsMapEntry methods */
void   txpool__tx_batch__tx_ids_map_entry__init
                     (Txpool__TxBatch__TxIdsMapEntry         *message);
/* Txpool__TxBatch methods */
void   txpool__tx_batch__init
                     (Txpool__TxBatch         *message);
size_t txpool__tx_batch__get_packed_size
                     (const Txpool__TxBatch   *message);
size_t txpool__tx_batch__pack
                     (const Txpool__TxBatch   *message,
                      uint8_t             *out);
size_t txpool__tx_batch__pack_to_buffer
                     (const Txpool__TxBatch   *message,
                      ProtobufCBuffer     *buffer);
Txpool__TxBatch *
       txpool__tx_batch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   txpool__tx_batch__free_unpacked
                     (Txpool__TxBatch *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Txpool__TxPoolSignal_Closure)
                 (const Txpool__TxPoolSignal *message,
                  void *closure_data);
typedef void (*Txpool__TxBatch__TxIdsMapEntry_Closure)
                 (const Txpool__TxBatch__TxIdsMapEntry *message,
                  void *closure_data);
typedef void (*Txpool__TxBatch_Closure)
                 (const Txpool__TxBatch *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    txpool__signal_type__descriptor;
extern const ProtobufCMessageDescriptor txpool__tx_pool_signal__descriptor;
extern const ProtobufCMessageDescriptor txpool__tx_batch__descriptor;
extern const ProtobufCMessageDescriptor txpool__tx_batch__tx_ids_map_entry__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_txpool_2ftransaction_5fpool_2eproto__INCLUDED */
